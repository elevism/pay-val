"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateExpirationYear = exports.validateExpirationMonth = exports.validateExpiration = void 0;
/**
 * Validate expiration month and year
 */
const validateExpiration = (month, year) => {
    if (!(0, exports.validateExpirationMonth)(month) || !(0, exports.validateExpirationYear)(year)) {
        return false;
    }
    // check that it expires this month or later
    const now = new Date();
    const thisYear = now.getFullYear();
    const thisMonth = now.getMonth() + 1;
    return (+year > now.getFullYear() ||
        (+year === thisYear && +month >= thisMonth));
};
exports.validateExpiration = validateExpiration;
/**
 * Validate the expiration month
 */
const validateExpirationMonth = (month) => {
    if (!month || month.length !== 2) {
        return false;
    }
    const num = parseInt(month, 10);
    return !isNaN(+month) && num > 0 && num < 13 && month.length === 2;
};
exports.validateExpirationMonth = validateExpirationMonth;
/**
 * Validate the expiration year
 */
const validateExpirationYear = (year) => {
    if (!year || (year.length !== 2 && year.length !== 4)) {
        return false;
    }
    const now = new Date();
    const yearPrefix = year.length === 4 ? '' : `${now.getFullYear()}`.substring(0, 2);
    const fullYear = `${yearPrefix}${year}`;
    const num = parseInt(fullYear, 10);
    return !isNaN(+num) && num >= now.getFullYear();
};
exports.validateExpirationYear = validateExpirationYear;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtZXhwaXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jcmVkaXQtY2FyZC92YWxpZGF0ZS1leHBpcmF0aW9uL3ZhbGlkYXRlLWV4cGlyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSSxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxFQUFFO0lBQ2hFLElBQUksQ0FBQyxJQUFBLCtCQUF1QixFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBQSw4QkFBc0IsRUFBQyxJQUFJLENBQUMsRUFBRTtRQUNwRSxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsNENBQTRDO0lBQzVDLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDdkIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFckMsT0FBTyxDQUNMLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUU7UUFDekIsQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLENBQzVDLENBQUM7QUFDSixDQUFDLENBQUM7QUFkVyxRQUFBLGtCQUFrQixzQkFjN0I7QUFFRjs7R0FFRztBQUNJLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRTtJQUN2RCxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWhDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDO0FBUlcsUUFBQSx1QkFBdUIsMkJBUWxDO0FBRUY7O0dBRUc7QUFDSSxNQUFNLHNCQUFzQixHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDckQsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDckQsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFFdkIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRW5GLE1BQU0sUUFBUSxHQUFHLEdBQUcsVUFBVSxHQUFHLElBQUksRUFBRSxDQUFDO0lBRXhDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFbkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbEQsQ0FBQyxDQUFDO0FBZFcsUUFBQSxzQkFBc0IsMEJBY2pDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBWYWxpZGF0ZSBleHBpcmF0aW9uIG1vbnRoIGFuZCB5ZWFyXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUV4cGlyYXRpb24gPSAobW9udGg6IHN0cmluZywgeWVhcjogc3RyaW5nKSA9PiB7XG4gIGlmICghdmFsaWRhdGVFeHBpcmF0aW9uTW9udGgobW9udGgpIHx8ICF2YWxpZGF0ZUV4cGlyYXRpb25ZZWFyKHllYXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gY2hlY2sgdGhhdCBpdCBleHBpcmVzIHRoaXMgbW9udGggb3IgbGF0ZXJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgY29uc3QgdGhpc1llYXIgPSBub3cuZ2V0RnVsbFllYXIoKTtcbiAgY29uc3QgdGhpc01vbnRoID0gbm93LmdldE1vbnRoKCkgKyAxO1xuXG4gIHJldHVybiAoXG4gICAgK3llYXIgPiBub3cuZ2V0RnVsbFllYXIoKSB8fFxuICAgICgreWVhciA9PT0gdGhpc1llYXIgJiYgK21vbnRoID49IHRoaXNNb250aClcbiAgKTtcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgdGhlIGV4cGlyYXRpb24gbW9udGhcbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRXhwaXJhdGlvbk1vbnRoID0gKG1vbnRoOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFtb250aCB8fCBtb250aC5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBudW0gPSBwYXJzZUludChtb250aCwgMTApO1xuXG4gIHJldHVybiAhaXNOYU4oK21vbnRoKSAmJiBudW0gPiAwICYmIG51bSA8IDEzICYmIG1vbnRoLmxlbmd0aCA9PT0gMjtcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgdGhlIGV4cGlyYXRpb24geWVhclxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVFeHBpcmF0aW9uWWVhciA9ICh5ZWFyOiBzdHJpbmcpID0+IHtcbiAgaWYgKCF5ZWFyIHx8ICh5ZWFyLmxlbmd0aCAhPT0gMiAmJiB5ZWFyLmxlbmd0aCAhPT0gNCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gIGNvbnN0IHllYXJQcmVmaXggPSB5ZWFyLmxlbmd0aCA9PT0gNCA/ICcnIDogYCR7bm93LmdldEZ1bGxZZWFyKCl9YC5zdWJzdHJpbmcoMCwgMik7XG5cbiAgY29uc3QgZnVsbFllYXIgPSBgJHt5ZWFyUHJlZml4fSR7eWVhcn1gO1xuXG4gIGNvbnN0IG51bSA9IHBhcnNlSW50KGZ1bGxZZWFyLCAxMCk7XG5cbiAgcmV0dXJuICFpc05hTigrbnVtKSAmJiBudW0gPj0gbm93LmdldEZ1bGxZZWFyKCk7XG59O1xuIl19